#!/bin/bash




IPSEC_PATH="/etc/ipsec.d"
IPSEC_LOCAL_PATH="/usr/local/etc/strongswan"


function get_dependencies() {
	apt update
	apt install -y strongswan strongswan-pki
}


 
function create_dirs() {
	mkdir -p $IPSEC_PATH/private
	mkdir -p $IPSEC_PATH/cacerts
	mkdir -p $IPSEC_PATH/certs
	mkdir -p $IPSEC_LOCAL_PATH/client-configs
	mkdir -p $IPSEC_LOCAL_PATH/export
}


function gen_root_CA() {
	# generate the root CA key
	ipsec pki --gen --type rsa \
	--size 4096 \
	--outform pem > $IPSEC_PATH/private/$CA_KEYNAME.pem
	chmod 600 $IPSEC_PATH/private/$CA_KEYNAME.pem

	# generate a self signed CA cert with the key just made
	ipsec pki --self --ca \
	--lifetime 3650 \
	--in $IPSEC_PATH/private/$CA_KEYNAME.pem \
	--type rsa \
	--dn "$CA_DN" \
	--outform pem > $IPSEC_PATH/cacerts/$CA_CERTNAME.pem
}


function gen_server_cert() {
	
	# generate the key
	ipsec pki --gen --type rsa \
	--size 4096 \
	--outform pem > $IPSEC_PATH/private/$SERVER_KEYNAME.pem
	
	chmod 600 $IPSEC_PATH/private/$SERVER_KEYNAME.pem

	# cenerate the public key and sign it
	ipsec pki --pub \
	--in $IPSEC_PATH/private/$SERVER_KEYNAME.pem \
	--type rsa | ipsec pki --issue \
	--lifetime 730 \
	--cacert $IPSEC_PATH/cacerts/$CA_CERTNAME.pem \
	 --cakey $IPSEC_PATH/private/$CA_KEYNAME.pem \
	--dn "$SERVER_DN" \
	--san "$SERVER_PUBLIC_IP" \
	--flag serverAuth \
	--flag ikeIntermediate \
	--outform pem > $IPSEC_PATH/certs/$SERVER_CERTNAME.pem 

} 


function clear_server_secrets {
	grep /etc/ipsec.secrets -e "\\s*#.*" > /etc/ipsec.secrets
}


# append server secret 
function add_server_secret {
	echo ": RSA $SERVER_KEYNAME.pem" >> /etc/ipsec.secrets 
}


function add_user_rsa {
	USERNAME="$1" 
	debug "creating private key for user $USERNAME"
	# create private key
	ipsec pki --gen \
	--type rsa \
	--size 4096 \
	--outform pem > $IPSEC_PATH/private/${USERNAME}key.pem 
	
	# create pubkey + cert 
	debug "creating public key for user ${USERNAME} and signing key"
	ipsec pki --pub \
	--in $IPSEC_PATH/private/${USERNAME}key.pem \
	--type rsa | ipsec pki --issue \
	--lifetime 730 \
	--cacert $IPSEC_PATH/cacerts/$CA_CERTNAME.pem \
	--cakey $IPSEC_PATH/private/$CA_KEYNAME.pem \
	--dn "C=US, O=Hillnetwork, CN=$USERNAME" \
	--san "$USERNAME@$SERVER_PUBLIC_IP" \
	--san "$USERNAME" \
	--outform pem > $IPSEC_PATH/certs/${USERNAME}cert.pem

	# add to export
	mkdir -p $IPSEC_LOCAL_PATH/export/$USERNAME
	mkdir -p $IPSEC_LOCAL_PATH/export/$USERNAME/cacerts
	mkdir -p $IPSEC_LOCAL_PATH/export/$USERNAME/certs
	mkdir -p $IPSEC_LOCAL_PATH/export/$USERNAME/private

	# add secret for user config 
	echo ": RSA $IPSEC_PATH/private/${USERNAME}key.pem" >> $IPSEC_LOCAL_PATH/export/$USERNAME/ipsec.secrets

	# add CA cert
	cp $IPSEC_PATH/cacerts/$CA_CERTNAME.pem $IPSEC_LOCAL_PATH/export/$USERNAME/cacerts

	# add private key	
	cp $IPSEC_PATH/private/${USERNAME}key.pem $IPSEC_LOCAL_PATH/export/$USERNAME/private

	# add client cert
	cp $IPSEC_PATH/certs/${USERNAME}cert.pem $IPSEC_LOCAL_PATH/export/${USERNAME}/certs

	# add server cert
	cp $IPSEC_PATH/certs/$SERVER_CERTNAME.pem $IPSEC_LOCAL_PATH/export/$USERNAME/certs

	# add client install script 
	cp $IPSEC_LOCAL_PATH/client-configs/install-config.sh $IPSEC_LOCAL_PATH/export/${USERNAME}/install-config.sh

	# generate the client config
	debug "Generating Server Cert keys and certs..."
	gen_client_config $USERNAME

	# add install script 
	debug "adding install script for ${USERNAME}..."
		
	chmod 600 $IPSEC_PATH/private/${USERNAME}key.pem
}

# generates the client config, given in client/ipsec.conf
function gen_client_config {
	debug "USERNAME: $USERNAME"
	USERNAME=$1
	RIGHT=$SERVER_PUBLIC_IP	
	if ! [[ $RIGHT =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; then 
		RIGHT="@${RIGHT}"
	fi

	cat configs/client/ipsec.conf \
	| sed "s/{{USERNAME}}/${USERNAME}/g" \
	| sed "s/{{SERVER_PUBLIC_IP}}/${SERVER_PUBLIC_IP}/" \
	| sed "s/{{SERVER_ID}}/${RIGHT}/" \
	| sed "s/{{CLIENT_CERTNAME}}/${USERNAME}cert.pem/" \
	> $IPSEC_LOCAL_PATH/export/${USERNAME}/ipsec.conf
}



function gen_install_config {

	mkdir -p $IPSEC_LOCAL_PATH/client-configs
	echo "
mkdir -p /etc/ipsec.d/cacerts
cp certs/* /etc/ipsec.d/certs/
cp private/* /etc/ipsec.d/private/
cp cacerts/* /etc/ipsec.d/cacerts/
cp ipsec.conf /etc/ipsec.conf
cp ipsec.secrets /etc/ipsec.secrets
" 	> $IPSEC_LOCAL_PATH/client-configs/install-config.sh
	chmod +x $IPSEC_LOCAL_PATH/client-configs/install-config.sh

}


function install_server_config {

	# determine if host is defined by IP or hostname
	LEFT=$SERVER_PUBLIC_IP	
	if ! [[ $LEFT =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; then 
		LEFT="@${LEFT}"
	fi
	cat configs/server/ipsec.conf | \
	sed "s/{{SERVER_PUBLIC_IP}}/${LEFT}/"  | \
	sed "s/{{SERVER_CERTNAME}}/${SERVER_CERTNAME}.pem/" > \
	/etc/ipsec.conf
}



function easyswan_init {
	
	debug "Updating Apt and getting dependencies..."
	get_dependencies

	debug "Creating the directory structure in $IPSEC_PATH..."
	create_dirs 
	
	debug "Generating Root CA keys and certs..."
	gen_root_CA

	debug "Generating Server Cert keys and certs..."
	gen_server_cert

	debug "Adding server cert to ipsec.secrets..."
	add_server_secret

	debug "Adding config to server..."
	install_server_config 

	debug "Generating Client Installation Config..."
	gen_install_config

}


function define_vars {

	# create the vars file 
	echo "
# CA variables
CA_KEYNAME=
CA_CERTNAME=
CA_DN=

# filename variables, shouldn't matter
SERVER_KEYNAME=serverkey
SERVER_CERTNAME=servercert

# this can be an IP address or a domain name
SERVER_PUBLIC_IP=


SERVER_DN=
" > vars

	# collect vars
	echo "Defining VPN variables..."
	read -p "Public IP or domain name: " SERVER_PUBLIC_IP

	echo "Defining variables for DN"
	read -p "Country: " C
	read -p "Organization: " ORG

	# CA vars
	sed -i "s/^CA_KEYNAME=.*/CA_KEYNAME=\"${ORG}_CA_key\"/" vars
	sed -i "s/^CA_CERTNAME=.*/CA_CERTNAME=\"${ORG}_CA_cert\"/" vars
	CA_DN="C=${C}, O=${ORG}, CN=${ORG} Root CA"
	sed -i "s/^CA_DN.*/CA_DN=\"${CA_DN}\"/" vars

	# server vars
	sed -i "s/^SERVER_PUBLIC_IP=.*/SERVER_PUBLIC_IP=\"${SERVER_PUBLIC_IP}\"/" vars
	SERVER_DN="C=${C}, O=${ORG}, CN=${SERVER_PUBLIC_IP}"
	sed -i "s/^SERVER_DN=.*/SERVER_DN=\"${SERVER_DN}\"/" vars
}


function easyswan_adduser {

	read -p "username: " NAME

	read -p "authentication type (RSA|EAP): " AUTH_TYPE
	
	case $AUTH_TYPE in 
		"RSA" | "rsa" )
			add_user_rsa $NAME
		;;
		"EAP" | "eap" )
			echo "not implemented yet"
			exit
		;;
		*) 
			echo "\"$AUTH_TYPE\" not found"
			exit
		;;
	esac
} 


function debug {
	RED='\033[0;31m'
	NC='\033[0m'
	printf "${RED}[DEBUG] $1 ${NC}\n"

}


function easyswan_help {
	echo "
usage: easyswan [option]

options:	
	init:
	defines variables, installs strongswan, creates the public key infrastructure, installs server configurations.

	adduser:
	starts intractive prompt to add a user.

	help:
	display this message
"
}


case $1 in 
	init)
		define_vars
		source vars
		easyswan_init
		;;
	
	adduser)
		source vars
		easyswan_adduser
		;;
	
	help | * )
		easyswan_help
		;;
	
esac
		

